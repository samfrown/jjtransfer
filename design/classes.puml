@startuml

package API {

package requests {
class AddAccountRequest {
    accountId: String
}

class TransferFromAccountRequest {
    destinationAccountId: String
    transferAmount: Number
}

class DepositRequest {
    depositAmount: Number
}
}

package responses {
class AccountRm {
    accountId: String
    balance: String
}

class TransferRm {
    transferId: String
    sourceAccountId: String
    destinationAccountId: String
    transferAmount: Number
    state: String
}
}

class AccountsResource {
}

class TransfersResource {
}
}

package Service {
class AccountService {
    create(accountId): Account
    find(accountId): Account
}

class TransferService {
    create()
    prepare()
    find()
    commit()
    complete()
    reject()
}

package domain.model {
enum TransferState {
    NEW
    PROCESSING
    REJECTING
    COMPLETED
    REJECTED
}

class Transfer {
    transferId: UUID
    sourceAccountId: String
    destinationAccountId: String
    transferAmount: MonetaryAmount
    state: TransferState
}

class Account {
    - accountId: String
    - balance: AccountBalance
    - preparedTransfers: Map
    take(MonetaryAmount)
    place(MonetaryAmount)
}
}


package DAO {
class AccountsDAO {
    accounts: Map
}

class TransfersDAO {
    transfers: Map
}
}

package processing {
class TransferProcessing {
}
}
}

AccountService *-u- AccountsDAO
TransferService *-u- TransfersDAO

AccountsResource *-u- AccountService
AccountsResource *-u- TransferService
TransfersResource *-u- TransferService
TransferProcessing ..> TransferService
@enduml